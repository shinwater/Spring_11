AOP(Aspect Oriented Programming : 관점 지향 프로그래밍)
	- 기존의 OOP(Object Oriented Programming : 객체 지향 프로그래밍)를 보완한 개념
	(핵심 사항과 공통 관심사항을 분리하여 구현)
	* 핵심사항(Primary concern)
	* 공통관심사항(cross-cutting concern) : 횡단 관심 사항
	
	
	# AOP 주요 용어(중요)
		- 핵심사항 (primary(core) concern) : 비지니스 로직(주 업무).
		- 공통 관심 사항(횡단관심사항 : cross-cutting concern) : 부가적인 기능(보조 업무).
		- Code : primary concern을 구현한 코드.
		- Advice : cross-cutting concern을 구현한 코드.//☆
		- JoinPoint : Advice가 적용될 위치.//☆
		- PointCut : JoinPoint의 부분집합으로서 실제 Advice가 적용되는 JoinPoint.//☆
		- Weaving : Code, Advice, Pointcut 등을 조합해서 어플리케이션을 만들어가는 과정.
		
	# 스프링은 자체적인 프록시 기반의 AOP를 지원.(프록시: 대행, 대리인... )
	
	# 스프링에서 AOP 구현방법 
		- 설정파일을 이용하는 방법(XML 기반의 구현 방법).
		- 어노테이션을 이용하는 방법(@AspectJ 어노테이션 기반의 AOP 구현).
		
		- 라이브러리 등록(pom.xml에)
			<dependency>
				<groupId>org.aspectJ</groupId>
				<artifactId>aspectjweaver</artifactId>
				<version></version>
			</dependency>
			
		- 공통기능 클래스 제작 - Advice 역할을 하는 클래스.
		
		- XML 파일에 Aspect
		
		- XML 파일에서 Advice 실행종류
			* <aop:before> : 핵심 기능이 실행되기 전에 Advice를 실행.
			* <aop:after-returning> : 정상적으로 핵심 기능 실행 후에 Advice를 실행.
			* <aop:after-throwing> : 핵심 기능이 실행 중에 Exception이 발생 시 Advice를 실행.
			* <aop:after> : 핵심 기능 실행 후에 Advice를 실행(Exception이 발생하더라도)
			* <aop:around> : 핵심 기능 실행 전/ 후 밑 Exception 발생시 Advice를 실행 ==> 가장많이 사용  
			
	
	#[AspectJ Pointcut 표현식] 
		- Pointcut을 지정할 때 사용하는 표현식으로 AspectJ 문법을 사용함.
		포인트컷으로 표현할 수 있는 명시자에는 여러 종류가 있지만 일반적으로 가장 많이 사용하는 명시자는 execution임.그 외에도 within,bean 명시자가 있음.
		
		- * : 모든
		- . : 현재
		- .. : 0개 이상
		
		execution : ("execution(public void get*(..))")
					==> public void 인 모든 메서드(인자가 0개 또는 그 이상).
					("execution(* com.test.aop.*.*())")
					==> com.test.aop 패키지의 모든 클래스에 파라미터가 없는 모든 메서드.
					("execution(* com.test.aop..*.*())")
					==> com.test.aop 패키지 & com.test.aop 하위 패키지의 모든 클래스에 파라미터가 없는 모든 메서드.
					("execution(* com.test.aop.Staff.*())")
					==> com.test.aop 패키지 안의 Staff라는 클래스 안의 모든 메서드.
					
					
		within : ("within(com.test.aop.*)")
				 ==> com.test.aop 패키지 안에 있는 모든 메서드.
				 ("within(com.test.aop..*)")
				 ==> com.test.aop 패키지 및 하위 패키지 안에 있는 모든 메서드.
				 ("within(com.test.aop.Staff)")
				 ==> com.test.aop 패키지의 Staff 클래스의 모든 메서드.
				
				 
		bean : ("bean(Staff)") 	==> Staff 빈에만 적용.
			   ("bean(*er)") 	==> ~er로 끝나는 빈에만 적용.
			   